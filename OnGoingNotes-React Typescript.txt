SOURCE: WebDevSimplified https://www.youtube.com/watch?v=lATafp15HWA

->  Project setup:
    -   Node version >= 18
    -   At your desired project directory run command "yarn create vite .".
    -   yarn
    -   Delete unneccessary files
    -   yarn dev
    -   INSTALL: yarn add react-router-dom tailwindcss postcss autoprefixer
    -   npx tailwindcss init -p
    -   Update ttailwind.config.js > content > "./src/**/*.{js,jsx,ts,tsx}",
    -   Include tailwind imports to main.css files
            @tailwind base;
            @tailwind components;
            @tailwind utilities;
    -   Import this file to main.tsx and update the App.tsx to test the css.
    -   Restart the server.

->  Into the project:
    -   Minor stylings done and Navbar set with a static cart button
    -   For store, data > storeItems.json created as static data. As images are needed those are also sourced acccrodingly.
    -   Created a StoreItem.tsx component to be rendered withing the Store.tsx component by looping each storeItem data.
    -   Inside the StoreItem.tsx file populating the data by mentioning the props type.
    -   As to format the price with according to the local Intl format, using a util > formatCurrency function that excepts a number and formats that in this case in USD.
    -   Added minor styling for the 'Add to cart' functionality.
As we are using static data, we will use useContext hook to create a providor and wrap the App with it.
    -   Create src > context > ShoppingCartContext.tsx (as it will return a Provider element) and a useShoppingCart() context function.
    -   We then wrap the App element inside main.tsx file.
Now we need to maintain the card add, remove functionalities. For that the ShoppingCArtContext needs to be updated.
    -   We are defining the context type ShoppingCartContext for this where we are having 4 different functions as theri types defined.
    -   Then the createContext that we had defined earlier, we are type definig that as ShoppingCartContext.
Now in order to use these 4 context functions we need a store which we will create a bit later. For now er are using a state variable to acheive the same.
    -   We have defined a useState variable for this as follows:
            const [cartItem, setCArtItem] = useState<CartItem[]>([]);
        And the type CartItem as 
            type CartItem = {
                id: number;
                quantity: number;
            };
Now we need to define the function to maintain the increment/decrement/removal of the store items.
    -   Define each functions and pass them in the Provider element's value object. Once all are added, all the errors will be gone from the file.
As we have defined them, now we will use them inside the StoreItem.tsx file
    -   In the StoreItem.tsx:
            import { useShoppingCart } from "../context/ShoppingCartContext";
            const {
                getItemQuantiy,
                increaseItemQuantity,
                decreaseItemQuantity,
                removeCartItem,
            } = useShoppingCart();
    -   Add all these functions to the buttons 